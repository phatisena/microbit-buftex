{"entries":[{"timestamp":1744865852185,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"//% color=\"#7C9BDE\" icon=\"\\uf187\"\nnamespace buftex {\n\n    /**\n     * convert your text to buffer string\n     * @param text input to encode\n     * @returns after convert your text to buffer string\n     */\n    //% blockid=buftex_encode\n    //% block=\"get $txtv convert to buffer\"\n    //% group=\"main\"\n    //% weight=10\n    export function encode(txtv: string) {\n        let numarrv: number[] = []\n        for (let i = 0; i < txtv.length; i++) {\n            let numv = txtv.charCodeAt(i)\n            const bytelen = Math.ceil(Math.log(numv + 1 * 2) / 8)\n            numarrv.push(bytelen)\n            for (let j = 0; j < bytelen; j++) {\n                numarrv.push(numv % 256)\n                numv = Math.floor(numv / 256)\n            }\n        }\n        numarrv.push(0)\n        return pins.createBufferFromArray(numarrv)\n    }\n\n    /**\n     * convert your buffer string to text\n     * @param your buffer string to decode\n     * @returns after convert your buffer to text\n     */\n    //% blockid=buftex_decode\n    //% block=\"get $bufv convert to string\"\n    //% bufv.shadow=variables_get bufv.defl=buffer\n    //% group=\"main\"\n    //% weight=5\n    export function decode(bufv: Buffer) {\n        let strtxt: string = \"\"\n        let bytelen = bufv[0], bytesum = 0, byteval = 0\n        for (let i = 1; i < bufv.length; i++) {\n            if (bytelen > 0) {\n                if (bytesum > 0) byteval += bufv[i] * bytesum\n                else byteval += bufv[i]\n                bytesum = (bytesum > 0) ? bytesum * 256 : 256\n                bytelen--\n            } else {\n                bytelen = bufv[i]\n                bytesum = 0\n                strtxt += String.fromCharCode(byteval)\n                byteval = 0\n            }\n        }\n        return strtxt\n    }\n}\n"]],"start1":0,"start2":0,"length1":1761,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"buffer text encoder for microbit"],[0,"\",\n "]],"start1":49,"start2":49,"length1":40,"length2":8},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":239,"start2":239,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744865852184,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"microbit-buftex\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744865945720}